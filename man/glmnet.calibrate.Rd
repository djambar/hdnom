% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/glmnet.calibrate.R
\name{glmnet.calibrate}
\alias{glmnet.calibrate}
\title{Calibrate Cox models fitted with glmnet}
\usage{
glmnet.calibrate(x, time, event, alpha, lambda, method = c("fitting",
  "bootstrap", "cv", "repeated.cv"), boot.times = NULL, nfolds = NULL,
  rep.times = NULL, pred.at, ngroup = 5, trace = TRUE)
}
\arguments{
\item{x}{Matrix of training data used for the \code{glmnet} object;
on which to run the calibration.}

\item{time}{Survival time.
Must be of the same length with the number of rows as \code{x}.}

\item{event}{Status indicator, normally 0 = alive, 1 = dead.
Must be of the same length with the number of rows as \code{x}.}

\item{alpha}{Value of the elastic-net mixing parameter alpha in
glmnet. \code{alpha=1}: lasso; \code{alpha=0}: ridge.
From the Cox model you have built.}

\item{lambda}{Value of the penalty parameter lambda to use in the
glmnet fits on the resampled data. From the Cox model you have built.}

\item{method}{Calibration method.
Options including \code{"fitting"}, \code{"bootstrap"}, \code{"cv"},
and \code{"repeated.cv"}.}

\item{boot.times}{Number of repetitions for bootstrap.}

\item{nfolds}{Number of folds for cross-validation and
repeated cross-validation.}

\item{rep.times}{Number of repeated times for repeated cross-validation.}

\item{pred.at}{Time point at which calibration should take place.}

\item{ngroup}{Number of groups to be formed for calibration.}

\item{trace}{Logical. Print trace or not. Default is \code{TRUE}.}
}
\description{
Calibrate Cox models fitted with glmnet
}
\examples{
library("glmnet")
library("survival")
library("rms")

# Load imputed SMART data
data(smart)
x = as.matrix(smart[, -c(1, 2)])
time = smart$TEVENT
event = smart$EVENT

# Fit penalized Cox model (lasso penalty) with glmnet
set.seed(1010)
cvfit = cv.glmnet(x, Surv(time, event), family = "cox", nfolds = 10)

# Model calibration by fitting the original data directly
cal.fitting = glmnet.calibrate(x, time, event,
                               alpha = 1, lambda = cvfit$lambda.1se,
                               method = 'fitting',
                               pred.at = 365 * 9, ngroup = 5)

print(cal.fitting)
summary(cal.fitting)
plot(cal.fitting)

# Model calibration by bootstrap
cal.boot = glmnet.calibrate(x, time, event,
                            alpha = 1, lambda = cvfit$lambda.1se,
                            method = 'bootstrap', boot.times = 20,
                            pred.at = 365 * 9, ngroup = 5)

print(cal.boot)
summary(cal.boot)
plot(cal.boot)

# Model calibration by 10-fold cross-validation
cal.cv = glmnet.calibrate(x, time, event,
                          alpha = 1, lambda = cvfit$lambda.1se,
                          method = 'cv', nfolds = 10,
                          pred.at = 365 * 9, ngroup = 5)

print(cal.cv)
summary(cal.cv)
plot(cal.cv)

# Model calibration by repeated cross-validation
cal.repcv = glmnet.calibrate(x, time, event,
                             alpha = 1, lambda = cvfit$lambda.1se,
                             method = 'repeated.cv', nfolds = 10, rep.times = 5,
                             pred.at = 365 * 9, ngroup = 5)

print(cal.repcv)
summary(cal.repcv)
plot(cal.repcv)
}

