% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/9.hdnom.external.calibrate.R
\name{hdnom.external.calibrate}
\alias{hdnom.external.calibrate}
\title{Externally Calibrate High-Dimensional Cox Models}
\usage{
hdnom.external.calibrate(object, x_new, time_new, event_new, pred.at,
  ngroup = 5)
}
\arguments{
\item{object}{Model object fitted by \code{hdcox.*()} functions.}

\item{x_new}{Matrix of predictors for the external validation data.}

\item{time_new}{Survival time of the external validation data.
Must be of the same length with the number of rows as \code{x_new}.}

\item{event_new}{Status indicator of the external validation data,
normally 0 = alive, 1 = dead.
Must be of the same length with the number of rows as \code{x_new}.}

\item{pred.at}{Time point at which external calibration should take place.}

\item{ngroup}{Number of groups to be formed for external calibration.}
}
\description{
Externally Calibrate High-Dimensional Cox Models
}
\examples{
library("glmnet")
library("survival")

# Load imputed SMART data
data(smart)
x = as.matrix(smart[, -c(1, 2)])
time = smart$TEVENT
event = smart$EVENT

# Fit penalized Cox model (lasso penalty) with glmnet
set.seed(1010)
cvfit = cv.glmnet(x, Surv(time, event), family = "cox", nfolds = 5)

# Model calibration by fitting the original data directly
cal.fitting = hdnom.calibrate(x, time, event, model.type = "lasso",
                              alpha = 1, lambda = cvfit$lambda.1se,
                              method = "fitting",
                              pred.at = 365 * 9, ngroup = 5)

# Model calibration by bootstrap
# Normally boot.times should be set to 200 or more,
# we set it to 3 here only to save example running time.
cal.boot = hdnom.calibrate(x, time, event, model.type = "lasso",
                           alpha = 1, lambda = cvfit$lambda.1se,
                           method = "bootstrap", boot.times = 3,
                           pred.at = 365 * 9, ngroup = 5)

# Model calibration by 5-fold cross-validation
cal.cv = hdnom.calibrate(x, time, event, model.type = "lasso",
                         alpha = 1, lambda = cvfit$lambda.1se,
                         method = "cv", nfolds = 5,
                         pred.at = 365 * 9, ngroup = 5)

# Model calibration by repeated cross-validation
cal.repcv = hdnom.calibrate(x, time, event, model.type = "lasso",
                            alpha = 1, lambda = cvfit$lambda.1se,
                            method = "repeated.cv", nfolds = 5, rep.times = 3,
                            pred.at = 365 * 9, ngroup = 5)

print(cal.fitting)
summary(cal.fitting)
plot(cal.fitting)

print(cal.boot)
summary(cal.boot)
plot(cal.boot)

print(cal.cv)
summary(cal.cv)
plot(cal.cv)

print(cal.repcv)
summary(cal.repcv)
plot(cal.repcv)
}

